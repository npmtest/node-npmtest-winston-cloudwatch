{"/home/travis/build/npmtest/node-npmtest-winston-cloudwatch/test.js":"/* istanbul instrument in package npmtest_winston_cloudwatch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-cloudwatch/lib.npmtest_winston_cloudwatch.js":"/* istanbul instrument in package npmtest_winston_cloudwatch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_winston_cloudwatch = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_winston_cloudwatch = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-cloudwatch/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-winston-cloudwatch && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_winston_cloudwatch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_winston_cloudwatch\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_winston_cloudwatch.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_winston_cloudwatch.rollup.js'] =\n            local.assetsDict['/assets.npmtest_winston_cloudwatch.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_winston_cloudwatch.__dirname + '/lib.npmtest_winston_cloudwatch.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-cloudwatch/node_modules/winston-cloudwatch/index.js":"'use strict';\n\nvar util = require('util'),\n    winston = require('winston'),\n    AWS = require('aws-sdk'),\n    cloudWatchIntegration = require('./lib/cloudwatch-integration'),\n    _ = require('lodash'),\n    stringify = require('./lib/utils').stringify,\n    debug = require('./lib/utils').debug;\n\n\nvar WinstonCloudWatch = function(options) {\n  winston.Transport.call(this, options);\n  this.level = options.level || 'info';\n  this.name = options.name || 'CloudWatch';\n  this.logGroupName = options.logGroupName;\n  this.logStreamName = options.logStreamName;\n\n  var awsAccessKeyId = options.awsAccessKeyId;\n  var awsSecretKey = options.awsSecretKey;\n  var awsRegion = options.awsRegion;\n  var messageFormatter = options.messageFormatter ? options.messageFormatter : function(log) {\n    return _.isEmpty(log.meta) ?\n      [ log.level, log.msg ].join(' - ') :\n      [ log.level, log.msg, stringify(log.meta) ].join(' - ');\n  };\n  this.formatMessage = options.jsonMessage ? stringify : messageFormatter;\n  var proxyServer = this.proxyServer = options.proxyServer;\n  this.uploadRate = options.uploadRate || 2000;\n  this.logEvents = [];\n  this.errorHandler = options.errorHandler;\n\n  if (this.proxyServer) {\n    AWS.config.update({\n      httpOptions: {\n        agent: require('proxy-agent')(this.proxyServer)\n      }\n    });\n  }\n\n  var config = {};\n\n  if (awsAccessKeyId && awsSecretKey && awsRegion) {\n    config = { accessKeyId: awsAccessKeyId, secretAccessKey: awsSecretKey, region: awsRegion };\n  } else if (awsRegion && !awsAccessKeyId && !awsSecretKey) {\n    // Amazon SDK will automatically pull access credentials\n    // from IAM Role when running on EC2 but region still\n    // needs to be configured\n    config = { region: awsRegion };\n  }\n\n  if(options.awsOptions){\n    config = _.assign(config, options.awsOptions);\n  }\n\n  this.cloudwatchlogs = new AWS.CloudWatchLogs(config);\n\n  debug('constructor finished');\n};\n\nutil.inherits(WinstonCloudWatch, winston.Transport);\n\nWinstonCloudWatch.prototype.log = function(level, msg, meta, callback) {\n  debug('log (called by winston)', level, msg, meta);\n\n  var log = { level: level, msg: msg, meta: meta };\n  if (!_.isEmpty(msg)) {\n    this.add(log);\n  }\n\n  if (!/^uncaughtException: /.test(msg)) {\n    // do not wait, just return right away\n    return callback(null, true);\n  }\n\n  // clear interval and send logs immediately\n  // as Winston is about to end the process\n  clearInterval(this.intervalId);\n  this.intervalId = null;\n  this.submit(callback);\n};\n\nWinstonCloudWatch.prototype.add = function(log) {\n  debug('add log to queue', log);\n\n  var self = this;\n\n  if (!_.isEmpty(log.msg)) {\n    self.logEvents.push({\n      message: self.formatMessage(log),\n      timestamp: new Date().getTime()\n    });\n  }\n\n  if (!self.intervalId) {\n    debug('creating interval');\n    self.intervalId = setInterval(function() {\n      self.submit(function(err) {\n        if (err) {\n          debug('error during submit', err, true);\n          self.errorHandler ? self.errorHandler(err) : console.error(err);\n        }\n      });\n    }, self.uploadRate);\n  }\n};\n\nWinstonCloudWatch.prototype.submit = function(callback) {\n  var groupName = typeof this.logGroupName === 'function' ?\n    this.logGroupName() : this.logGroupName;\n  var streamName = typeof this.logStreamName === 'function' ?\n    this.logStreamName() : this.logStreamName;\n\n  if (_.isEmpty(this.logEvents)) {\n    return callback();\n  }\n\n  cloudWatchIntegration.upload(\n    this.cloudwatchlogs,\n    groupName,\n    streamName,\n    this.logEvents,\n    callback\n  );\n};\n\nWinstonCloudWatch.prototype.kthxbye = function(callback) {\n  clearInterval(this.intervalId);\n  this.intervalId = null;\n  this.submit(callback);\n};\n\nwinston.transports.CloudWatch = WinstonCloudWatch;\n\nmodule.exports = WinstonCloudWatch;\n","/home/travis/build/npmtest/node-npmtest-winston-cloudwatch/node_modules/winston-cloudwatch/lib/cloudwatch-integration.js":"var LIMITS = {\n  MAX_EVENT_MSG_SIZE_BYTES: 256000,   // The real max size is 262144, we leave some room for overhead on each message\n  MAX_BATCH_SIZE_BYTES: 1000000,      // We leave some fudge factor here too.\n  MAX_BATCH_SIZE_COUNT : 100          // Bigger number means fewer requests to post.\n};\n\nvar _ = require('lodash'),\n    async = require('async'),\n    stringify = require('./utils').stringify,\n    debug = require('./utils').debug;\n\nvar lib = {};\n\nlib.upload = function(aws, groupName, streamName, logEvents, cb) {\n  debug('upload', logEvents);\n\n  // trying to send a batch before the last completed\n  // would cause InvalidSequenceTokenException.\n  if (lib._postingEvents || logEvents.length <= 0) {\n    debug('nothing to do or already doing something');\n    return cb();\n  }\n\n  lib._postingEvents = true;\n  safeUpload(function(err) {\n    lib._postingEvents = false;\n    return cb(err);\n  });\n\n  // safeUpload introduced after https://github.com/lazywithclass/winston-cloudwatch/issues/55\n  // Note that calls to upload() can occur at a greater frequency\n  // than getToken() responses are processed. By way of example, consider if add() is\n  // called at 0s and 1.1s, each time with a single event, and upload() is called\n  // at 1.0s and 2.0s, with the same logEvents array, but calls to getToken()\n  // take 1.5s to return. When the first call to getToken() DOES return,\n  // it will send both events and empty the array. Then, when the second call\n  // go getToken() returns, without this check also here, it would attempt to send\n  // an empty array, resulting in the InvalidParameterException.\n  function safeUpload(cb) {\n    lib.getToken(aws, groupName, streamName, function(err, token) {\n\n      if (err) {\n        debug('error getting token', err, true);\n        return cb(err);\n      }\n\n      var entryIndex = 0;\n      var bytes = 0;\n      while (entryIndex < logEvents.length &&\n             entryIndex <= LIMITS.MAX_BATCH_SIZE_COUNT) {\n        var ev = logEvents[entryIndex];\n        // unit tests pass null elements\n        var evSize = ev ? Buffer.byteLength(ev.message, 'utf8') : 0; \n        if(evSize > LIMITS.MAX_EVENT_MSG_SIZE_BYTES) {\n          evSize = LIMITS.MAX_EVENT_MSG_SIZE_BYTES;\n          ev.message = ev.message.substring(0, evSize); \n          const msgTooBigErr = new Error('Message Truncated because it exceeds the CloudWatch size limit');\n          msgTooBigErr.logEvent = ev;\n          cb(msgTooBigErr);\n        }\n        if (bytes + evSize > LIMITS.MAX_BATCH_SIZE_BYTES) break;\n        bytes += evSize;\n        entryIndex++;\n      }\n\n      var payload = {\n        logGroupName: groupName,\n        logStreamName: streamName,\n        logEvents: logEvents.splice(0, entryIndex)\n      };\n      if (token) payload.sequenceToken = token;\n\n      lib._postingEvents = true;\n      debug('send to aws');\n      aws.putLogEvents(payload, function(err) {\n        if (err) {\n          if (err.code === 'InvalidSequenceTokenException') {\n            debug('InvalidSequenceTokenException, retrying', true)\n            lib.submitWithAnotherToken(aws, groupName, streamName, payload, cb)\n          } else {\n            debug('error during putLogEvents', err, true)\n            retrySubmit(aws, payload, 3, cb)\n          }\n        } else  {\n          lib._postingEvents = false;\n          cb()\n        }\n      });\n    });\n  }\n};\n\nlib.submitWithAnotherToken = function(aws, groupName, streamName, payload, cb) {\n  lib.getToken(aws, groupName, streamName, function(err, token) {\n    payload.sequenceToken = token;\n    aws.putLogEvents(payload, function(err) {\n      lib._postingEvents = false;\n      cb(err)\n    });\n  })\n}\n\nfunction retrySubmit(aws, payload, times, cb) {\n  debug('retrying to upload', times, 'more times')\n  aws.putLogEvents(payload, function(err) {\n    if (err && times > 0) {\n      retrySubmit(aws, payload, times - 1, cb)\n    } else {\n      lib._postingEvents = false;\n      cb(err)\n    }\n  })\n}\n\nlib.getToken = function(aws, groupName, streamName, cb) {\n  async.series([\n    lib.ensureGroupPresent.bind(null, aws, groupName),\n    lib.getStream.bind(null, aws, groupName, streamName)\n  ], function(err, resources) {\n    var groupPresent = resources[0],\n        stream = resources[1];\n    if (groupPresent && stream) {\n      debug('token found', stream.uploadSequenceToken);\n      cb(err, stream.uploadSequenceToken);\n    } else {\n      debug('token not found', err);\n      cb(err);\n    }\n  });\n};\n\nlib.ensureGroupPresent = function ensureGroupPresent(aws, name, cb) {\n  debug('ensure group present');\n  var params = { logGroupName: name };\n  aws.describeLogStreams(params, function(err, data) {\n    // TODO we should cb(err, false) if there's an error?\n    if (err && err.code == 'ResourceNotFoundException') {\n      debug('create group');\n      return aws.createLogGroup(params, lib.ignoreInProgress(function(err) {\n        cb(err, err ? false : true);\n      }));\n    } else {\n      cb(err, true);\n    }\n  });\n};\n\nlib.getStream = function getStream(aws, groupName, streamName, cb) {\n  var params = {\n    logGroupName: groupName,\n    logStreamNamePrefix: streamName\n  };\n\n  aws.describeLogStreams(params, function(err, data) {\n    debug('ensure stream present');\n    if (err) return cb(err);\n\n    var stream = _.find(data.logStreams, function(stream) {\n      return stream.logStreamName === streamName;\n    });\n\n    if (!stream) {\n      debug('create stream');\n      aws.createLogStream({\n        logGroupName: groupName,\n        logStreamName: streamName\n      }, lib.ignoreInProgress(function(err) {\n        if (err) return cb(err);\n        getStream(aws, groupName, streamName, cb);\n      }));\n    } else {\n      cb(null, stream);\n    }\n  });\n};\n\nlib.ignoreInProgress = function ignoreInProgress(cb) {\n  return function(err, data) {\n    if (err && (err.code == 'OperationAbortedException' ||\n                err.code == 'ResourceAlreadyExistsException')) {\n      debug('ignore operation in progress', err.message);\n      cb(null, data);\n    } else {\n      cb(err, data);\n    }\n  };\n};\n\nmodule.exports = lib;\n","/home/travis/build/npmtest/node-npmtest-winston-cloudwatch/node_modules/winston-cloudwatch/lib/utils.js":"var chalk = require('chalk');\n\nfunction stringify(o) { return JSON.stringify(o, null, '  '); }\n\nfunction debug() {\n  if (!process.env.WINSTON_CLOUDWATCH_DEBUG) return;\n  var args = [].slice.call(arguments);\n  var lastParam = args.pop();\n  var color = chalk.red;\n  if (lastParam !== true) {\n    args.push(lastParam);\n    color = chalk.green;\n  }\n\n  args[0] = color(args[0]);\n  args.unshift(chalk.blue('DEBUG:'));\n  console.log.apply(console, args);\n}\n\nmodule.exports = {\n  stringify: stringify,\n  debug: debug\n};\n"}